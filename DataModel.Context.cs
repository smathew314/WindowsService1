//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ODataService314e
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BusinessSector> BusinessSectors { get; set; }
        public virtual DbSet<Candidate> Candidates { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<ClientContact> ClientContacts { get; set; }
        public virtual DbSet<ClientCorporation> ClientCorporations { get; set; }
        public virtual DbSet<CorporateUser> CorporateUsers { get; set; }
        public virtual DbSet<CorporationDepartment> CorporationDepartments { get; set; }
        public virtual DbSet<EditHistoryCandidate> EditHistoryCandidates { get; set; }
        public virtual DbSet<EditHistoryClientContact> EditHistoryClientContacts { get; set; }
        public virtual DbSet<EditHistoryClientCorporation> EditHistoryClientCorporations { get; set; }
        public virtual DbSet<EditHistoryJobOrder> EditHistoryJobOrders { get; set; }
        public virtual DbSet<EditHistoryJobSubmission> EditHistoryJobSubmissions { get; set; }
        public virtual DbSet<EditHistoryPlacement> EditHistoryPlacements { get; set; }
        public virtual DbSet<JobOrder> JobOrders { get; set; }
        public virtual DbSet<JobSubmission> JobSubmissions { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<Placement> Placements { get; set; }
        public virtual DbSet<PlacementChangeRequest> PlacementChangeRequests { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<Specialty> Specialties { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimecardBatch> TimecardBatches { get; set; }
        public virtual DbSet<TimecardPayClass> TimecardPayClasses { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<CandidateBusinessSector> CandidateBusinessSectors { get; set; }
        public virtual DbSet<CandidateCategory> CandidateCategories { get; set; }
        public virtual DbSet<CandidateEducation> CandidateEducations { get; set; }
        public virtual DbSet<CandidateReference> CandidateReferences { get; set; }
        public virtual DbSet<CandidateSecondaryOwner> CandidateSecondaryOwners { get; set; }
        public virtual DbSet<CandidateSkill> CandidateSkills { get; set; }
        public virtual DbSet<CandidateWorkHistory> CandidateWorkHistories { get; set; }
        public virtual DbSet<CategorySkill> CategorySkills { get; set; }
        public virtual DbSet<ClientContactBusinessSector> ClientContactBusinessSectors { get; set; }
        public virtual DbSet<ClientContactCategory> ClientContactCategories { get; set; }
        public virtual DbSet<ClientContactSecondaryOwner> ClientContactSecondaryOwners { get; set; }
        public virtual DbSet<ClientContactSkill> ClientContactSkills { get; set; }
        public virtual DbSet<HousingComplex> HousingComplexes { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceItem> InvoiceItems { get; set; }
        public virtual DbSet<JobOrderAssignedUser> JobOrderAssignedUsers { get; set; }
        public virtual DbSet<JobOrderBusinessSector> JobOrderBusinessSectors { get; set; }
        public virtual DbSet<JobOrderCategory> JobOrderCategories { get; set; }
        public virtual DbSet<jobOrderSkill> jobOrderSkills { get; set; }
        public virtual DbSet<NoteEntity> NoteEntities { get; set; }
        public virtual DbSet<PlacementCommission> PlacementCommissions { get; set; }
        public virtual DbSet<Sendout> Sendouts { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Tearsheet> Tearsheets { get; set; }
        public virtual DbSet<TearsheetCandidate> TearsheetCandidates { get; set; }
        public virtual DbSet<TearsheetContact> TearsheetContacts { get; set; }
        public virtual DbSet<TearsheetJob> TearsheetJobs { get; set; }
        public virtual DbSet<Timecard> Timecards { get; set; }
        public virtual DbSet<TimecardExpense> TimecardExpenses { get; set; }
        public virtual DbSet<TimecardTime> TimecardTimes { get; set; }
        public virtual DbSet<UserDepartmentGrouping> UserDepartmentGroupings { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
